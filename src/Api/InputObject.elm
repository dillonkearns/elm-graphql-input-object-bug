-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Enum.ProjectSortOption
import Api.Enum.SortDirection
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildDocumentInput :
    DocumentInputRequiredFields
    -> (DocumentInputOptionalFields -> DocumentInputOptionalFields)
    -> DocumentInput
buildDocumentInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { versions = Absent }
    in
    { name = required.name, versions = optionals.versions }


type alias DocumentInputRequiredFields =
    { name : String }


type alias DocumentInputOptionalFields =
    { versions : OptionalArgument (List (Maybe VersionInput)) }


{-| Type for the DocumentInput input object.
-}
type alias DocumentInput =
    { name : String
    , versions : OptionalArgument (List (Maybe VersionInput))
    }


{-| Encode a DocumentInput into a value that can be used as an argument.
-}
encodeDocumentInput : DocumentInput -> Value
encodeDocumentInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "versions", (encodeVersionInput |> Encode.maybe |> Encode.list) |> Encode.optional input.versions ) ]


buildFormFieldInput :
    FormFieldInputRequiredFields
    -> (FormFieldInputOptionalFields -> FormFieldInputOptionalFields)
    -> FormFieldInput
buildFormFieldInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { value = Absent }
    in
    { uuid = required.uuid, kind = required.kind, value = optionals.value }


type alias FormFieldInputRequiredFields =
    { uuid : String
    , kind : String
    }


type alias FormFieldInputOptionalFields =
    { value : OptionalArgument String }


{-| Type for the FormFieldInput input object.
-}
type alias FormFieldInput =
    { uuid : String
    , kind : String
    , value : OptionalArgument String
    }


{-| Encode a FormFieldInput into a value that can be used as an argument.
-}
encodeFormFieldInput : FormFieldInput -> Value
encodeFormFieldInput input =
    Encode.maybeObject
        [ ( "uuid", Encode.string input.uuid |> Just ), ( "kind", Encode.string input.kind |> Just ), ( "value", Encode.string |> Encode.optional input.value ) ]


buildInspectionFilters :
    (InspectionFiltersOptionalFields -> InspectionFiltersOptionalFields)
    -> InspectionFilters
buildInspectionFilters fillOptionals =
    let
        optionals =
            fillOptionals
                { jurisdictionId = Absent, userId = Absent, startDate = Absent, endDate = Absent }
    in
    { jurisdictionId = optionals.jurisdictionId, userId = optionals.userId, startDate = optionals.startDate, endDate = optionals.endDate }


type alias InspectionFiltersOptionalFields =
    { jurisdictionId : OptionalArgument Api.ScalarCodecs.Id
    , userId : OptionalArgument Api.ScalarCodecs.Id
    , startDate : OptionalArgument String
    , endDate : OptionalArgument String
    }


{-| Type for the InspectionFilters input object.
-}
type alias InspectionFilters =
    { jurisdictionId : OptionalArgument Api.ScalarCodecs.Id
    , userId : OptionalArgument Api.ScalarCodecs.Id
    , startDate : OptionalArgument String
    , endDate : OptionalArgument String
    }


{-| Encode a InspectionFilters into a value that can be used as an argument.
-}
encodeInspectionFilters : InspectionFilters -> Value
encodeInspectionFilters input =
    Encode.maybeObject
        [ ( "jurisdictionId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.jurisdictionId ), ( "userId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) |> Encode.optional input.userId ), ( "startDate", Encode.string |> Encode.optional input.startDate ), ( "endDate", Encode.string |> Encode.optional input.endDate ) ]


buildParcelInput :
    ParcelInputRequiredFields
    -> (ParcelInputOptionalFields -> ParcelInputOptionalFields)
    -> ParcelInput
buildParcelInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { owner = Absent, acreage = Absent, landUse = Absent, data = Absent }
    in
    { parcelId = required.parcelId, address = required.address, lonlat = required.lonlat, owner = optionals.owner, acreage = optionals.acreage, landUse = optionals.landUse, data = optionals.data }


type alias ParcelInputRequiredFields =
    { parcelId : String
    , address : String
    , lonlat : String
    }


type alias ParcelInputOptionalFields =
    { owner : OptionalArgument String
    , acreage : OptionalArgument String
    , landUse : OptionalArgument String
    , data : OptionalArgument Api.ScalarCodecs.Json
    }


{-| Type for the ParcelInput input object.
-}
type alias ParcelInput =
    { parcelId : String
    , address : String
    , lonlat : String
    , owner : OptionalArgument String
    , acreage : OptionalArgument String
    , landUse : OptionalArgument String
    , data : OptionalArgument Api.ScalarCodecs.Json
    }


{-| Encode a ParcelInput into a value that can be used as an argument.
-}
encodeParcelInput : ParcelInput -> Value
encodeParcelInput input =
    Encode.maybeObject
        [ ( "parcelId", Encode.string input.parcelId |> Just ), ( "address", Encode.string input.address |> Just ), ( "lonlat", Encode.string input.lonlat |> Just ), ( "owner", Encode.string |> Encode.optional input.owner ), ( "acreage", Encode.string |> Encode.optional input.acreage ), ( "landUse", Encode.string |> Encode.optional input.landUse ), ( "data", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecJson) |> Encode.optional input.data ) ]


buildPermissionInput :
    PermissionInputRequiredFields
    -> PermissionInput
buildPermissionInput required =
    { permission = required.permission, role = required.role, user = required.user }


type alias PermissionInputRequiredFields =
    { permission : Int
    , role : String
    , user : UserInput
    }


{-| Type for the PermissionInput input object.
-}
type alias PermissionInput =
    { permission : Int
    , role : String
    , user : UserInput
    }


{-| Encode a PermissionInput into a value that can be used as an argument.
-}
encodePermissionInput : PermissionInput -> Value
encodePermissionInput input =
    Encode.maybeObject
        [ ( "permission", Encode.int input.permission |> Just ), ( "role", Encode.string input.role |> Just ), ( "user", encodeUserInput input.user |> Just ) ]


buildProjectFilters :
    ProjectFiltersRequiredFields
    -> (ProjectFiltersOptionalFields -> ProjectFiltersOptionalFields)
    -> ProjectFilters
buildProjectFilters required fillOptionals =
    let
        optionals =
            fillOptionals
                { number = Absent, projectType = Absent, name = Absent, address = Absent, comments = Absent, insertedAt = Absent }
    in
    { jurisdictionId = required.jurisdictionId, number = optionals.number, projectType = optionals.projectType, name = optionals.name, address = optionals.address, comments = optionals.comments, insertedAt = optionals.insertedAt }


type alias ProjectFiltersRequiredFields =
    { jurisdictionId : String }


type alias ProjectFiltersOptionalFields =
    { number : OptionalArgument String
    , projectType : OptionalArgument String
    , name : OptionalArgument String
    , address : OptionalArgument String
    , comments : OptionalArgument String
    , insertedAt : OptionalArgument String
    }


{-| Type for the ProjectFilters input object.
-}
type alias ProjectFilters =
    { jurisdictionId : String
    , number : OptionalArgument String
    , projectType : OptionalArgument String
    , name : OptionalArgument String
    , address : OptionalArgument String
    , comments : OptionalArgument String
    , insertedAt : OptionalArgument String
    }


{-| Encode a ProjectFilters into a value that can be used as an argument.
-}
encodeProjectFilters : ProjectFilters -> Value
encodeProjectFilters input =
    Encode.maybeObject
        [ ( "jurisdictionId", Encode.string input.jurisdictionId |> Just ), ( "number", Encode.string |> Encode.optional input.number ), ( "projectType", Encode.string |> Encode.optional input.projectType ), ( "name", Encode.string |> Encode.optional input.name ), ( "address", Encode.string |> Encode.optional input.address ), ( "comments", Encode.string |> Encode.optional input.comments ), ( "insertedAt", Encode.string |> Encode.optional input.insertedAt ) ]


buildProjectSort :
    (ProjectSortOptionalFields -> ProjectSortOptionalFields)
    -> ProjectSort
buildProjectSort fillOptionals =
    let
        optionals =
            fillOptionals
                { direction = Absent, field = Absent }
    in
    { direction = optionals.direction, field = optionals.field }


type alias ProjectSortOptionalFields =
    { direction : OptionalArgument Api.Enum.SortDirection.SortDirection
    , field : OptionalArgument Api.Enum.ProjectSortOption.ProjectSortOption
    }


{-| Type for the ProjectSort input object.
-}
type alias ProjectSort =
    { direction : OptionalArgument Api.Enum.SortDirection.SortDirection
    , field : OptionalArgument Api.Enum.ProjectSortOption.ProjectSortOption
    }


{-| Encode a ProjectSort into a value that can be used as an argument.
-}
encodeProjectSort : ProjectSort -> Value
encodeProjectSort input =
    Encode.maybeObject
        [ ( "direction", Encode.enum Api.Enum.SortDirection.toString |> Encode.optional input.direction ), ( "field", Encode.enum Api.Enum.ProjectSortOption.toString |> Encode.optional input.field ) ]


buildProjectStepInput :
    ProjectStepInputRequiredFields
    -> ProjectStepInput
buildProjectStepInput required =
    { projectStepTemplateId = required.projectStepTemplateId }


type alias ProjectStepInputRequiredFields =
    { projectStepTemplateId : Api.ScalarCodecs.Id }


{-| Type for the ProjectStepInput input object.
-}
type alias ProjectStepInput =
    { projectStepTemplateId : Api.ScalarCodecs.Id }


{-| Encode a ProjectStepInput into a value that can be used as an argument.
-}
encodeProjectStepInput : ProjectStepInput -> Value
encodeProjectStepInput input =
    Encode.maybeObject
        [ ( "projectStepTemplateId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.projectStepTemplateId |> Just ) ]


buildShapeInput :
    (ShapeInputOptionalFields -> ShapeInputOptionalFields)
    -> ShapeInput
buildShapeInput fillOptionals =
    let
        optionals =
            fillOptionals
                { kind = Absent, geometry = Absent }
    in
    { kind = optionals.kind, geometry = optionals.geometry }


type alias ShapeInputOptionalFields =
    { kind : OptionalArgument String
    , geometry : OptionalArgument (List (Maybe (List (Maybe Float))))
    }


{-| Type for the ShapeInput input object.
-}
type alias ShapeInput =
    { kind : OptionalArgument String
    , geometry : OptionalArgument (List (Maybe (List (Maybe Float))))
    }


{-| Encode a ShapeInput into a value that can be used as an argument.
-}
encodeShapeInput : ShapeInput -> Value
encodeShapeInput input =
    Encode.maybeObject
        [ ( "kind", Encode.string |> Encode.optional input.kind ), ( "geometry", (Encode.float |> Encode.maybe |> Encode.maybe |> Encode.list |> Encode.list) |> Encode.optional input.geometry ) ]


buildUserInput :
    UserInputRequiredFields
    -> UserInput
buildUserInput required =
    { name = required.name, company = required.company, phone = required.phone, email = required.email, address = required.address, lonlat = required.lonlat }


type alias UserInputRequiredFields =
    { name : String
    , company : String
    , phone : String
    , email : String
    , address : String
    , lonlat : String
    }


{-| Type for the UserInput input object.
-}
type alias UserInput =
    { name : String
    , company : String
    , phone : String
    , email : String
    , address : String
    , lonlat : String
    }


{-| Encode a UserInput into a value that can be used as an argument.
-}
encodeUserInput : UserInput -> Value
encodeUserInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "company", Encode.string input.company |> Just ), ( "phone", Encode.string input.phone |> Just ), ( "email", Encode.string input.email |> Just ), ( "address", Encode.string input.address |> Just ), ( "lonlat", Encode.string input.lonlat |> Just ) ]


buildVersionInput :
    (VersionInputOptionalFields -> VersionInputOptionalFields)
    -> VersionInput
buildVersionInput fillOptionals =
    let
        optionals =
            fillOptionals
                { cloudFileId = Absent }
    in
    { cloudFileId = optionals.cloudFileId }


type alias VersionInputOptionalFields =
    { cloudFileId : OptionalArgument String }


{-| Type for the VersionInput input object.
-}
type alias VersionInput =
    { cloudFileId : OptionalArgument String }


{-| Encode a VersionInput into a value that can be used as an argument.
-}
encodeVersionInput : VersionInput -> Value
encodeVersionInput input =
    Encode.maybeObject
        [ ( "cloudFileId", Encode.string |> Encode.optional input.cloudFileId ) ]
