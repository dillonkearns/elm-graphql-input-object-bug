-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.ProjectSortOption exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ProjectSortOption
    = Number
    | User
    | ProjectType
    | Address
    | Name
    | Comments
    | InsertedAt


list : List ProjectSortOption
list =
    [ Number, User, ProjectType, Address, Name, Comments, InsertedAt ]


decoder : Decoder ProjectSortOption
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NUMBER" ->
                        Decode.succeed Number

                    "USER" ->
                        Decode.succeed User

                    "PROJECT_TYPE" ->
                        Decode.succeed ProjectType

                    "ADDRESS" ->
                        Decode.succeed Address

                    "NAME" ->
                        Decode.succeed Name

                    "COMMENTS" ->
                        Decode.succeed Comments

                    "INSERTED_AT" ->
                        Decode.succeed InsertedAt

                    _ ->
                        Decode.fail ("Invalid ProjectSortOption type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ProjectSortOption -> String
toString enum =
    case enum of
        Number ->
            "NUMBER"

        User ->
            "USER"

        ProjectType ->
            "PROJECT_TYPE"

        Address ->
            "ADDRESS"

        Name ->
            "NAME"

        Comments ->
            "COMMENTS"

        InsertedAt ->
            "INSERTED_AT"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ProjectSortOption
fromString enumString =
    case enumString of
        "NUMBER" ->
            Just Number

        "USER" ->
            Just User

        "PROJECT_TYPE" ->
            Just ProjectType

        "ADDRESS" ->
            Just Address

        "NAME" ->
            Just Name

        "COMMENTS" ->
            Just Comments

        "INSERTED_AT" ->
            Just InsertedAt

        _ ->
            Nothing
