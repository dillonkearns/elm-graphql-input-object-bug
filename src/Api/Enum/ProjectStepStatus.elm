-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.ProjectStepStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ProjectStepStatus
    = InProgress
    | Completed
    | Approved


list : List ProjectStepStatus
list =
    [ InProgress, Completed, Approved ]


decoder : Decoder ProjectStepStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "IN_PROGRESS" ->
                        Decode.succeed InProgress

                    "COMPLETED" ->
                        Decode.succeed Completed

                    "APPROVED" ->
                        Decode.succeed Approved

                    _ ->
                        Decode.fail ("Invalid ProjectStepStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ProjectStepStatus -> String
toString enum =
    case enum of
        InProgress ->
            "IN_PROGRESS"

        Completed ->
            "COMPLETED"

        Approved ->
            "APPROVED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ProjectStepStatus
fromString enumString =
    case enumString of
        "IN_PROGRESS" ->
            Just InProgress

        "COMPLETED" ->
            Just Completed

        "APPROVED" ->
            Just Approved

        _ ->
            Nothing
