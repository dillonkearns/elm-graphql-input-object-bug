-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.InspectionSort exposing (..)

import Json.Decode as Decode exposing (Decoder)


type InspectionSort
    = ScheduledDate
    | Time


list : List InspectionSort
list =
    [ ScheduledDate, Time ]


decoder : Decoder InspectionSort
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "SCHEDULED_DATE" ->
                        Decode.succeed ScheduledDate

                    "TIME" ->
                        Decode.succeed Time

                    _ ->
                        Decode.fail ("Invalid InspectionSort type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : InspectionSort -> String
toString enum =
    case enum of
        ScheduledDate ->
            "SCHEDULED_DATE"

        Time ->
            "TIME"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe InspectionSort
fromString enumString =
    case enumString of
        "SCHEDULED_DATE" ->
            Just ScheduledDate

        "TIME" ->
            Just Time

        _ ->
            Nothing
