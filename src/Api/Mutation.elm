-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Mutation exposing (..)

import Api.Enum.InspectionStatus
import Api.Enum.ProjectStepStatus
import Api.Enum.PunchListItemStatus
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateCloudFileOptionalArguments =
    { filename : OptionalArgument String
    , contentType : OptionalArgument String
    , externalUrl : OptionalArgument String
    , width : OptionalArgument Int
    , height : OptionalArgument Int
    }


createCloudFile :
    (CreateCloudFileOptionalArguments -> CreateCloudFileOptionalArguments)
    -> SelectionSet decodesTo Api.Object.CloudFile
    -> SelectionSet (Maybe decodesTo) RootMutation
createCloudFile fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filename = Absent, contentType = Absent, externalUrl = Absent, width = Absent, height = Absent }

        optionalArgs =
            [ Argument.optional "filename" filledInOptionals.filename Encode.string, Argument.optional "contentType" filledInOptionals.contentType Encode.string, Argument.optional "externalUrl" filledInOptionals.externalUrl Encode.string, Argument.optional "width" filledInOptionals.width Encode.int, Argument.optional "height" filledInOptionals.height Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createCloudFile" optionalArgs object_ (identity >> Decode.nullable)


type alias CreateDocumentOptionalArguments =
    { documentableSubmissionId : OptionalArgument Api.ScalarCodecs.Id }


type alias CreateDocumentRequiredArguments =
    { name : String }


createDocument :
    (CreateDocumentOptionalArguments -> CreateDocumentOptionalArguments)
    -> CreateDocumentRequiredArguments
    -> SelectionSet decodesTo Api.Object.Document
    -> SelectionSet (Maybe decodesTo) RootMutation
createDocument fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { documentableSubmissionId = Absent }

        optionalArgs =
            [ Argument.optional "documentableSubmissionId" filledInOptionals.documentableSubmissionId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createDocument" (optionalArgs ++ [ Argument.required "name" requiredArgs.name Encode.string ]) object_ (identity >> Decode.nullable)


type alias UpdateInspectionItemOptionalArguments =
    { isChecked : OptionalArgument Bool }


type alias UpdateInspectionItemRequiredArguments =
    { id : Api.ScalarCodecs.Id }


updateInspectionItem :
    (UpdateInspectionItemOptionalArguments -> UpdateInspectionItemOptionalArguments)
    -> UpdateInspectionItemRequiredArguments
    -> SelectionSet decodesTo Api.Object.InspectionItem
    -> SelectionSet (Maybe decodesTo) RootMutation
updateInspectionItem fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { isChecked = Absent }

        optionalArgs =
            [ Argument.optional "isChecked" filledInOptionals.isChecked Encode.bool ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateInspectionItem" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdateInspectionOptionalArguments =
    { scheduledDate : OptionalArgument String
    , requestedTime : OptionalArgument String
    , notes : OptionalArgument String
    , status : OptionalArgument Api.Enum.InspectionStatus.InspectionStatus
    }


type alias UpdateInspectionRequiredArguments =
    { id : Api.ScalarCodecs.Id }


updateInspection :
    (UpdateInspectionOptionalArguments -> UpdateInspectionOptionalArguments)
    -> UpdateInspectionRequiredArguments
    -> SelectionSet decodesTo Api.Object.Inspection
    -> SelectionSet (Maybe decodesTo) RootMutation
updateInspection fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { scheduledDate = Absent, requestedTime = Absent, notes = Absent, status = Absent }

        optionalArgs =
            [ Argument.optional "scheduledDate" filledInOptionals.scheduledDate Encode.string, Argument.optional "requestedTime" filledInOptionals.requestedTime Encode.string, Argument.optional "notes" filledInOptionals.notes Encode.string, Argument.optional "status" filledInOptionals.status (Encode.enum Api.Enum.InspectionStatus.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateInspection" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias CreateProjectRequiredArguments =
    { jurisdictionId : Api.ScalarCodecs.Id
    , name : String
    , description : String
    , permissions : List (Maybe Api.InputObject.PermissionInput)
    , parcels : List (Maybe Api.InputObject.ParcelInput)
    , documents : List (Maybe Api.InputObject.DocumentInput)
    }


createProject :
    CreateProjectRequiredArguments
    -> SelectionSet decodesTo Api.Object.Project
    -> SelectionSet (Maybe decodesTo) RootMutation
createProject requiredArgs object_ =
    Object.selectionForCompositeField "createProject" [ Argument.required "jurisdictionId" requiredArgs.jurisdictionId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "name" requiredArgs.name Encode.string, Argument.required "description" requiredArgs.description Encode.string, Argument.required "permissions" requiredArgs.permissions (Api.InputObject.encodePermissionInput |> Encode.maybe |> Encode.list), Argument.required "parcels" requiredArgs.parcels (Api.InputObject.encodeParcelInput |> Encode.maybe |> Encode.list), Argument.required "documents" requiredArgs.documents (Api.InputObject.encodeDocumentInput |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable)


type alias UpdateProjectOptionalArguments =
    { name : OptionalArgument String
    , description : OptionalArgument String
    , permissions : OptionalArgument (List (Maybe Api.InputObject.PermissionInput))
    , parcels : OptionalArgument (List (Maybe Api.InputObject.ParcelInput))
    , projectSteps : OptionalArgument (List (Maybe Api.InputObject.ProjectStepInput))
    }


type alias UpdateProjectRequiredArguments =
    { id : Api.ScalarCodecs.Id }


updateProject :
    (UpdateProjectOptionalArguments -> UpdateProjectOptionalArguments)
    -> UpdateProjectRequiredArguments
    -> SelectionSet decodesTo Api.Object.Project
    -> SelectionSet (Maybe decodesTo) RootMutation
updateProject fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { name = Absent, description = Absent, permissions = Absent, parcels = Absent, projectSteps = Absent }

        optionalArgs =
            [ Argument.optional "name" filledInOptionals.name Encode.string, Argument.optional "description" filledInOptionals.description Encode.string, Argument.optional "permissions" filledInOptionals.permissions (Api.InputObject.encodePermissionInput |> Encode.maybe |> Encode.list), Argument.optional "parcels" filledInOptionals.parcels (Api.InputObject.encodeParcelInput |> Encode.maybe |> Encode.list), Argument.optional "projectSteps" filledInOptionals.projectSteps (Api.InputObject.encodeProjectStepInput |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateProject" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias UpdateProjectStepOptionalArguments =
    { status : OptionalArgument Api.Enum.ProjectStepStatus.ProjectStepStatus }


type alias UpdateProjectStepRequiredArguments =
    { id : Api.ScalarCodecs.Id }


updateProjectStep :
    (UpdateProjectStepOptionalArguments -> UpdateProjectStepOptionalArguments)
    -> UpdateProjectStepRequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectStep
    -> SelectionSet (Maybe decodesTo) RootMutation
updateProjectStep fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { status = Absent }

        optionalArgs =
            [ Argument.optional "status" filledInOptionals.status (Encode.enum Api.Enum.ProjectStepStatus.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateProjectStep" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias CreatePunchListItemOptionalArguments =
    { shapes : OptionalArgument (List (Maybe Api.InputObject.ShapeInput)) }


type alias CreatePunchListItemRequiredArguments =
    { inspectionId : Api.ScalarCodecs.Id
    , imageCloudFileId : String
    , note : String
    }


createPunchListItem :
    (CreatePunchListItemOptionalArguments -> CreatePunchListItemOptionalArguments)
    -> CreatePunchListItemRequiredArguments
    -> SelectionSet decodesTo Api.Object.PunchListItem
    -> SelectionSet (Maybe decodesTo) RootMutation
createPunchListItem fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { shapes = Absent }

        optionalArgs =
            [ Argument.optional "shapes" filledInOptionals.shapes (Api.InputObject.encodeShapeInput |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createPunchListItem" (optionalArgs ++ [ Argument.required "inspectionId" requiredArgs.inspectionId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "imageCloudFileId" requiredArgs.imageCloudFileId Encode.string, Argument.required "note" requiredArgs.note Encode.string ]) object_ (identity >> Decode.nullable)


type alias UpdatePunchListItemOptionalArguments =
    { note : OptionalArgument String
    , status : OptionalArgument Api.Enum.PunchListItemStatus.PunchListItemStatus
    }


type alias UpdatePunchListItemRequiredArguments =
    { id : Api.ScalarCodecs.Id }


updatePunchListItem :
    (UpdatePunchListItemOptionalArguments -> UpdatePunchListItemOptionalArguments)
    -> UpdatePunchListItemRequiredArguments
    -> SelectionSet decodesTo Api.Object.PunchListItem
    -> SelectionSet (Maybe decodesTo) RootMutation
updatePunchListItem fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { note = Absent, status = Absent }

        optionalArgs =
            [ Argument.optional "note" filledInOptionals.note Encode.string, Argument.optional "status" filledInOptionals.status (Encode.enum Api.Enum.PunchListItemStatus.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updatePunchListItem" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias DeletePunchListItemRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deletePunchListItem :
    DeletePunchListItemRequiredArguments
    -> SelectionSet decodesTo Api.Object.PunchListItem
    -> SelectionSet (Maybe decodesTo) RootMutation
deletePunchListItem requiredArgs object_ =
    Object.selectionForCompositeField "deletePunchListItem" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias CreateReviewRequestOptionalArguments =
    { reviewRequestableUserId : OptionalArgument Api.ScalarCodecs.Id
    , reviewRequestableGroupId : OptionalArgument Api.ScalarCodecs.Id
    }


type alias CreateReviewRequestRequiredArguments =
    { documentId : Api.ScalarCodecs.Id }


createReviewRequest :
    (CreateReviewRequestOptionalArguments -> CreateReviewRequestOptionalArguments)
    -> CreateReviewRequestRequiredArguments
    -> SelectionSet decodesTo Api.Object.ReviewRequest
    -> SelectionSet (Maybe decodesTo) RootMutation
createReviewRequest fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { reviewRequestableUserId = Absent, reviewRequestableGroupId = Absent }

        optionalArgs =
            [ Argument.optional "reviewRequestableUserId" filledInOptionals.reviewRequestableUserId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.optional "reviewRequestableGroupId" filledInOptionals.reviewRequestableGroupId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createReviewRequest" (optionalArgs ++ [ Argument.required "documentId" requiredArgs.documentId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias DeleteReviewRequestRequiredArguments =
    { id : Api.ScalarCodecs.Id }


deleteReviewRequest :
    DeleteReviewRequestRequiredArguments
    -> SelectionSet decodesTo Api.Object.ReviewRequest
    -> SelectionSet (Maybe decodesTo) RootMutation
deleteReviewRequest requiredArgs object_ =
    Object.selectionForCompositeField "deleteReviewRequest" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias UpdateSubmissionOptionalArguments =
    { formData : OptionalArgument (List (Maybe Api.InputObject.FormFieldInput)) }


type alias UpdateSubmissionRequiredArguments =
    { id : Api.ScalarCodecs.Id }


updateSubmission :
    (UpdateSubmissionOptionalArguments -> UpdateSubmissionOptionalArguments)
    -> UpdateSubmissionRequiredArguments
    -> SelectionSet decodesTo Api.Object.Submission
    -> SelectionSet (Maybe decodesTo) RootMutation
updateSubmission fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { formData = Absent }

        optionalArgs =
            [ Argument.optional "formData" filledInOptionals.formData (Api.InputObject.encodeFormFieldInput |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateSubmission" (optionalArgs ++ [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias CreateUserRequiredArguments =
    { email : String }


createUser :
    CreateUserRequiredArguments
    -> SelectionSet decodesTo Api.Object.User
    -> SelectionSet (Maybe decodesTo) RootMutation
createUser requiredArgs object_ =
    Object.selectionForCompositeField "createUser" [ Argument.required "email" requiredArgs.email Encode.string ] object_ (identity >> Decode.nullable)


type alias CreateVersionRequiredArguments =
    { documentId : Api.ScalarCodecs.Id
    , cloudFileId : String
    }


createVersion :
    CreateVersionRequiredArguments
    -> SelectionSet decodesTo Api.Object.Version
    -> SelectionSet (Maybe decodesTo) RootMutation
createVersion requiredArgs object_ =
    Object.selectionForCompositeField "createVersion" [ Argument.required "documentId" requiredArgs.documentId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId), Argument.required "cloudFileId" requiredArgs.cloudFileId Encode.string ] object_ (identity >> Decode.nullable)
