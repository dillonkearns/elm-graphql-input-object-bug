-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.Enum.InspectionSort
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AnnotationsOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    , filter : OptionalArgument Api.ScalarCodecs.Json
    , sort : OptionalArgument String
    }


type alias AnnotationsRequiredArguments =
    { documentId : Api.ScalarCodecs.Id }


annotations :
    (AnnotationsOptionalArguments -> AnnotationsOptionalArguments)
    -> AnnotationsRequiredArguments
    -> SelectionSet decodesTo Api.Object.AnnotationConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
annotations fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent, filter = Absent, sort = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "filter" filledInOptionals.filter (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecJson), Argument.optional "sort" filledInOptionals.sort Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "annotations" (optionalArgs ++ [ Argument.required "documentId" requiredArgs.documentId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias AnnotationRequiredArguments =
    { id : Api.ScalarCodecs.Id }


annotation :
    AnnotationRequiredArguments
    -> SelectionSet decodesTo Api.Object.Annotation
    -> SelectionSet (Maybe decodesTo) RootQuery
annotation requiredArgs object_ =
    Object.selectionForCompositeField "annotation" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias CloudFileRequiredArguments =
    { id : Api.ScalarCodecs.Id }


cloudFile :
    CloudFileRequiredArguments
    -> SelectionSet decodesTo Api.Object.CloudFile
    -> SelectionSet (Maybe decodesTo) RootQuery
cloudFile requiredArgs object_ =
    Object.selectionForCompositeField "cloudFile" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias CommentRequiredArguments =
    { id : Api.ScalarCodecs.Id }


comment :
    CommentRequiredArguments
    -> SelectionSet decodesTo Api.Object.Comment
    -> SelectionSet (Maybe decodesTo) RootQuery
comment requiredArgs object_ =
    Object.selectionForCompositeField "comment" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias DocumentRequiredArguments =
    { id : Api.ScalarCodecs.Id }


document :
    DocumentRequiredArguments
    -> SelectionSet decodesTo Api.Object.Document
    -> SelectionSet (Maybe decodesTo) RootQuery
document requiredArgs object_ =
    Object.selectionForCompositeField "document" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias FirmRequiredArguments =
    { id : Api.ScalarCodecs.Id }


firm :
    FirmRequiredArguments
    -> SelectionSet decodesTo Api.Object.Firm
    -> SelectionSet (Maybe decodesTo) RootQuery
firm requiredArgs object_ =
    Object.selectionForCompositeField "firm" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias FormRequiredArguments =
    { id : Api.ScalarCodecs.Id }


form :
    FormRequiredArguments
    -> SelectionSet decodesTo Api.Object.Form
    -> SelectionSet (Maybe decodesTo) RootQuery
form requiredArgs object_ =
    Object.selectionForCompositeField "form" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias GroupRequiredArguments =
    { id : Api.ScalarCodecs.Id }


group :
    GroupRequiredArguments
    -> SelectionSet decodesTo Api.Object.Group
    -> SelectionSet (Maybe decodesTo) RootQuery
group requiredArgs object_ =
    Object.selectionForCompositeField "group" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias InspectionItemRequiredArguments =
    { id : Api.ScalarCodecs.Id }


inspectionItem :
    InspectionItemRequiredArguments
    -> SelectionSet decodesTo Api.Object.InspectionItem
    -> SelectionSet (Maybe decodesTo) RootQuery
inspectionItem requiredArgs object_ =
    Object.selectionForCompositeField "inspectionItem" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias InspectionRequiredArguments =
    { id : Api.ScalarCodecs.Id }


inspection :
    InspectionRequiredArguments
    -> SelectionSet decodesTo Api.Object.Inspection
    -> SelectionSet (Maybe decodesTo) RootQuery
inspection requiredArgs object_ =
    Object.selectionForCompositeField "inspection" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias InspectionsOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    , sort : OptionalArgument (List (Maybe Api.Enum.InspectionSort.InspectionSort))
    , filter : OptionalArgument Api.InputObject.InspectionFilters
    }


inspections :
    (InspectionsOptionalArguments -> InspectionsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.InspectionConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
inspections fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent, sort = Absent, filter = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "sort" filledInOptionals.sort (Encode.enum Api.Enum.InspectionSort.toString |> Encode.maybe |> Encode.list), Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeInspectionFilters ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "inspections" optionalArgs object_ (identity >> Decode.nullable)


type alias InspectionTemplateItemRequiredArguments =
    { id : Api.ScalarCodecs.Id }


inspectionTemplateItem :
    InspectionTemplateItemRequiredArguments
    -> SelectionSet decodesTo Api.Object.InspectionTemplateItem
    -> SelectionSet (Maybe decodesTo) RootQuery
inspectionTemplateItem requiredArgs object_ =
    Object.selectionForCompositeField "inspectionTemplateItem" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias InspectionTemplateRequiredArguments =
    { id : Api.ScalarCodecs.Id }


inspectionTemplate :
    InspectionTemplateRequiredArguments
    -> SelectionSet decodesTo Api.Object.InspectionTemplate
    -> SelectionSet (Maybe decodesTo) RootQuery
inspectionTemplate requiredArgs object_ =
    Object.selectionForCompositeField "inspectionTemplate" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias IssueRequiredArguments =
    { id : Api.ScalarCodecs.Id }


issue :
    IssueRequiredArguments
    -> SelectionSet decodesTo Api.Object.Issue
    -> SelectionSet (Maybe decodesTo) RootQuery
issue requiredArgs object_ =
    Object.selectionForCompositeField "issue" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias JurisdictionsOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    }


jurisdictions :
    (JurisdictionsOptionalArguments -> JurisdictionsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.JurisdictionConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
jurisdictions fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "jurisdictions" optionalArgs object_ (identity >> Decode.nullable)


type alias JurisdictionRequiredArguments =
    { id : Api.ScalarCodecs.Id }


jurisdiction :
    JurisdictionRequiredArguments
    -> SelectionSet decodesTo Api.Object.Jurisdiction
    -> SelectionSet (Maybe decodesTo) RootQuery
jurisdiction requiredArgs object_ =
    Object.selectionForCompositeField "jurisdiction" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias PageRequiredArguments =
    { id : Api.ScalarCodecs.Id }


page :
    PageRequiredArguments
    -> SelectionSet decodesTo Api.Object.Page
    -> SelectionSet (Maybe decodesTo) RootQuery
page requiredArgs object_ =
    Object.selectionForCompositeField "page" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias PermissionRequiredArguments =
    { id : Api.ScalarCodecs.Id }


permission :
    PermissionRequiredArguments
    -> SelectionSet decodesTo Api.Object.Permission
    -> SelectionSet (Maybe decodesTo) RootQuery
permission requiredArgs object_ =
    Object.selectionForCompositeField "permission" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias ProjectRequiredArguments =
    { id : Api.ScalarCodecs.Id }


project :
    ProjectRequiredArguments
    -> SelectionSet decodesTo Api.Object.Project
    -> SelectionSet (Maybe decodesTo) RootQuery
project requiredArgs object_ =
    Object.selectionForCompositeField "project" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias ProjectsOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    , sort : OptionalArgument (List (Maybe Api.InputObject.ProjectSort))
    }


type alias ProjectsRequiredArguments =
    { filter : Api.InputObject.ProjectFilters }


projects :
    (ProjectsOptionalArguments -> ProjectsOptionalArguments)
    -> ProjectsRequiredArguments
    -> SelectionSet decodesTo Api.Object.ProjectConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
projects fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent, sort = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "sort" filledInOptionals.sort (Api.InputObject.encodeProjectSort |> Encode.maybe |> Encode.list) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "projects" (optionalArgs ++ [ Argument.required "filter" requiredArgs.filter Api.InputObject.encodeProjectFilters ]) object_ (identity >> Decode.nullable)


type alias ProjectTypeOptionalArguments =
    { after : OptionalArgument String
    , first : OptionalArgument Int
    , before : OptionalArgument String
    , last : OptionalArgument Int
    , filter : OptionalArgument Api.ScalarCodecs.Json
    , sort : OptionalArgument String
    }


type alias ProjectTypeRequiredArguments =
    { jurisdictionId : Api.ScalarCodecs.Id }


projectType :
    (ProjectTypeOptionalArguments -> ProjectTypeOptionalArguments)
    -> ProjectTypeRequiredArguments
    -> SelectionSet decodesTo Api.Object.AnnotationConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
projectType fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, first = Absent, before = Absent, last = Absent, filter = Absent, sort = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "filter" filledInOptionals.filter (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecJson), Argument.optional "sort" filledInOptionals.sort Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "projectType" (optionalArgs ++ [ Argument.required "jurisdictionId" requiredArgs.jurisdictionId (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ]) object_ (identity >> Decode.nullable)


type alias PunchListItemRequiredArguments =
    { id : Api.ScalarCodecs.Id }


punchListItem :
    PunchListItemRequiredArguments
    -> SelectionSet decodesTo Api.Object.PunchListItem
    -> SelectionSet (Maybe decodesTo) RootQuery
punchListItem requiredArgs object_ =
    Object.selectionForCompositeField "punchListItem" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias ReviewRequestRequiredArguments =
    { id : Api.ScalarCodecs.Id }


reviewRequest :
    ReviewRequestRequiredArguments
    -> SelectionSet decodesTo Api.Object.ReviewRequest
    -> SelectionSet (Maybe decodesTo) RootQuery
reviewRequest requiredArgs object_ =
    Object.selectionForCompositeField "reviewRequest" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias StampRequiredArguments =
    { id : Api.ScalarCodecs.Id }


stamp :
    StampRequiredArguments
    -> SelectionSet decodesTo Api.Object.Stamp
    -> SelectionSet (Maybe decodesTo) RootQuery
stamp requiredArgs object_ =
    Object.selectionForCompositeField "stamp" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias StampedDocumentRequiredArguments =
    { id : Api.ScalarCodecs.Id }


stampedDocument :
    StampedDocumentRequiredArguments
    -> SelectionSet decodesTo Api.Object.StampedDocument
    -> SelectionSet (Maybe decodesTo) RootQuery
stampedDocument requiredArgs object_ =
    Object.selectionForCompositeField "stampedDocument" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias UserRequiredArguments =
    { id : Api.ScalarCodecs.Id }


user :
    UserRequiredArguments
    -> SelectionSet decodesTo Api.Object.User
    -> SelectionSet (Maybe decodesTo) RootQuery
user requiredArgs object_ =
    Object.selectionForCompositeField "user" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


tasks :
    SelectionSet decodesTo Api.Object.Task
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
tasks object_ =
    Object.selectionForCompositeField "tasks" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


type alias VersionRequiredArguments =
    { id : Api.ScalarCodecs.Id }


version :
    VersionRequiredArguments
    -> SelectionSet decodesTo Api.Object.Version
    -> SelectionSet (Maybe decodesTo) RootQuery
version requiredArgs object_ =
    Object.selectionForCompositeField "version" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias NodeRequiredArguments =
    { id : Api.ScalarCodecs.Id }


{-|

  - id - The id of an object.

-}
node :
    NodeRequiredArguments
    -> SelectionSet decodesTo Api.Interface.Node
    -> SelectionSet (Maybe decodesTo) RootQuery
node requiredArgs object_ =
    Object.selectionForCompositeField "node" [ Argument.required "id" requiredArgs.id (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
